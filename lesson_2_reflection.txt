1. What happens when you initialize a repository? Why do you need to do it?
初始化版本库时会发生什么情况？为什么你需要这样做？

装了一个空的代码库在文件夹里


2. How is the staging area different from the working directory and the repository?
What value do you think it offers?
暂存区与工作目录和版本库有何不同？你认为它具有什么价值？

版本库是所有commit和commit所包含的文件
工作目录就是那个项目文件夹
暂存区是可以灵活的指定文件打包成一个commit去进行提交，确定好后再提交到代码库


3. How can you use the staging area to make sure you have one commit per logical
change?
如何使用暂存区确保为每项逻辑更改进行一次提交？

使用git diff对比work directory和staging area进行确认


4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？

当我想创建一个不同想法的版本并且又不想影响当前正式版的时候，就可以创建分支
我可以在分支上去commit修改更新我的实验版本


5. How do the diagrams help you visualize the branch structure?
图表如何帮助你直观显示分支结构？

使用git log --graph --online name name、


6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
将两个分支合并到一起有何结果？为什么我们在图表中表示它的方式是那样的？

两个分支中的commit会按照提交时间合并在一起


7. What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
Git 的自动合并与始终手动进行合并各有何优缺点？

自动合并很快很方便，但是遇到冲突的时候就无法进行下去
手动合并可以处理冲突

